/**
 * OS Map Viewer
 * Internal web application for the viewing of OS raster mapping sources 
 * and the potting of coordinates in various formats.
 * 
 * @author Geoff Chapman <geoff.chapman@theaa.com>
 * @version 3
 */

const NAMES_API_KEY = "";
var map,
	StartLocation = [465778, 154005],
	Layers = [],
	iconLayer,
	routeLayer;

/**
 * Event Listener - An internal event listener for informing other objects that 
 * methods have completed etc via observer pattern
 * @constructor
 * @param {string} sender - Source class of the event
 */
var Event = function (sender) {

	this._sender = sender;
	this._listeners = [];
};

/**
 * Attach a listener to an event
 * @param  {function} listener - function attacted to the event
 */
Event.prototype.attach = function(listener) {
	this._listeners.push(listener);
};

/**
 * Notify the listener an event has happend
 * @param  {Object} args - Information generated by the event
 */
Event.prototype.notify = function(args) {
	for (var index = 0; index < this._listeners.length; index += 1) {
        this._listeners[index](this._sender, args);
    }
};


var getSiblings = function (el, filter) {
	var siblings = [];
	el = el.parentNode.firstChild;
	do { if (!filter || filter(el)) siblings.push(el); } while (el = el.nextSibling);
	return siblings;
}

var elementFilter = function(elem) {
	return elem.nodeName.toLowerCase() == 'fieldset';
}



/**
 * Provides the base mapping for the application via the OpenLayers 3 library
 * 
 * @module MapModule
 */
var MapModule = (function() {
	'use strict'
	/**
 	 * MapModel - Constuctor function to build base mapping using OpenLayers 3 library
 	 * NB: could have done via literal as there is little happens but stuck with constructor
	 * to be consistent with rest of th application logic
	 * 
	 * @class MapModel
	 * @constructor
	 * @param {string} target - CSS ID of target div for mapping
	 */ 
	var MapModel = function(target) {

		this._target = target;

		this.addBase = function () {

			var geoserver = new Geoserver();
				
			map = new ol.Map({
				controls: [],
				layers: [
					geoserver.getLayer(),
					iconLayer = new ol.layer.Vector(),
					routeLayer = new ol.layer.Vector()
				],
				target: this._target,
				view: new ol.View({
					projection: 'EPSG:27700',
					center: StartLocation,
					// AA Version
					resolutions:geoserver.getResolutions(),
					zoom: 14,
					maxZoom: 17,
					minZoom: 9
				})
			});

		};

		this.addZoomControls = function() {

			var _this = this;

			var zoomIn = document.getElementById('zoomInButton');
				zoomIn.className = 'zoomIn sidebarIcon';
		
			var zoomOut = document.getElementById('zoomOutButton');
				zoomOut.className = 'zoomOut sidebarIcon';

			var handleZoomIn = function(e){
				_this.handleZoomIn(e);
			}	

			var handleZoomOut = function(e) {
				_this.handleZoomOut(e);
			}

			zoomIn.addEventListener('click', handleZoomIn, false);
			zoomOut.addEventListener('click', handleZoomOut, false);

			var customZoom = document.getElementById('customZoom');
				customZoom.className = 'customZoom ol-unselectable';

			var myControl = new ol.control.Control({
				className: 'myControl',
				element: customZoom,
				target: document.getElementById('customZoomWrapper')
			});

			map.addControl(myControl);
		}

		this.handleZoomIn = function(e) {
			e.preventDefault();
			map.getView().setZoom(map.getView().getZoom()+1);
		}

		this.handleZoomOut = function(e) {
			e.preventDefault();
			map.getView().setZoom(map.getView().getZoom()-1);
		}
	};



	/**
	 * MapController - Constructor function to instantiate a controller
	 * 
	 * @class  MapController
	 * @constructor
	 * @param {Object} model - The Model of the module to be controlled
	 * @param {Object} view - The View of the module to be controlled
	 */
	var MapController = function(model, view) {

		this._model = model;
		this._view = view;

		var _this = this;
	}

	/**
	 * Tell the model the load the map
	 * 
	 * @method loadMap
	 */
	MapController.prototype.loadMap = function() {
		var _this = this;
		
		this._model.addBase();

		this._model.addZoomControls();
			
	};

	/**
	 * MapView - Constructor function to instantiate a view
	 * siply respondes to the load and passes 
	 * @param {Object} model - The Model of the module to be viewed
	 */
	var MapView = function(model) {

		this._model = model;

		var _this = this;

		this.pageLoaded = new Event(this);
	
	}

	/**
	 * @todo Is this the best place to call this from?
	 */
	MapView.prototype.addMapIcon = function (coordinateResults) {
		
		var iconFeature = new ol.Feature({
			geometry: new ol.geom.Point([coordinateResults.finalEasting,coordinateResults.finalNorthing]) 
		});
		
		var iconStyle = new ol.style.Style({
			image: new ol.style.Icon({
				anchor:[0.5, 0.9],
				anchorXUnits: 'fraction',
				anchorYUnits: 'fraction',
				src: 'assets/images/LocationIcon.png'
			})
		});
		iconFeature.setStyle(iconStyle);
		var iconSource = new ol.source.Vector({
			features: [iconFeature],
		});

		iconLayer.setSource(iconSource);
	};

	MapView.prototype.addRouteLine = function(routeFeature) {

		// Set of generic styles for showing various geometry types
            var defaultStyle = {
                'Point': new ol.style.Style({
                    image: new ol.style.Circle({
                        fill: new ol.style.Fill({
                            color: 'rgba(255,255,0,0.5)'
                        }),
                        radius: 5,
                        stroke: new ol.style.Stroke({
                            color: '#ff0',
                            width: 1
                        })
                    })
                }),
                'LineString': new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: '#f00',
                        width: 3
                    })
                }),
                'Polygon': new ol.style.Style({
                    fill: new ol.style.Fill({
                        color: 'rgba(0,255,255,0.5)'
                    }),
                    stroke: new ol.style.Stroke({
                        color: '#0ff',
                        width: 1
                    })
                }),
                'MultiPoint': new ol.style.Style({
                    image: new ol.style.Circle({
                        fill: new ol.style.Fill({
                            color: 'rgba(255,0,255,0.5)'
                        }),
                        radius: 5,
                        stroke: new ol.style.Stroke({
                            color: '#f0f',
                            width: 1
                        })
                    })
                }),
                'MultiLineString': new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: '#0f0',
                        width: 3
                    })
                }),
                'MultiPolygon': new ol.style.Style({
                    fill: new ol.style.Fill({
                        color: 'rgba(0,0,255,0.5)'
                    }),
                    stroke: new ol.style.Stroke({
                        color: '#00f',
                        width: 1
                    })
                })
            };

			routeFeature.setStyle(defaultStyle[routeFeature.getGeometry().getType()]);
			// Add features to source then apply to layer
            // layer created in aaMapViewer.js
            var routeFeatureSource = new ol.source.Vector({
                features: [routeFeature],
            });

            routeLayer.setSource(routeFeatureSource);
			return;
	}

	// Return Module to wider app
	return {
		model: MapModel,
		view: MapView,
		controller: MapController
	};
})();



/**
 * Provides the mechanism for conversion of coordinates from
 * BNG to WGS84 via jsCoordinateConverter
 * 
 * @module CoordinatesModule 
 */
var CoordinatesModule = (function(){
	'use strict'
	/**
	 * CoordinatesModel - This Model handles access to the 
	 * coordinate conversion tools
	 *
	 * @class CoordinatesModel
	 * @constructor 
	 */ 
	var CoordinatesModel = function() {

		this.results = [];

		this.gridRef = new Event(this);

		this.TranMerConversion = new jsCoordinateConverter.TranMerConversion();
		this.osng = new jsCoordinateConverter.OSNGConversions();

		var _this = this;
	};

	/**
	 * Read an OS grid reference as a pair of easting and northings
	 * 
	 * @method readGridRef
	 * @param {String} gridref - Grid reference to be converted
	 * @return {Array} Pair of easting/northings from grid reference
	 */
	CoordinatesModel.prototype.readGridRef = function(gridRef) {
		var res = this.osng.gridrefLetToNum(gridRef);
		console.log(res);
		return res;
	};

	/**
	 * Generate a OS grid reference from a pair of easting/northings
	 * 
	 * @method getGridRef
	 * @param {Integer} easting - easting value of coordinate pair to be converted
	 * @param {Integer} northing - northing value of coordinate pair to be converted
	 * @param {Integer} size - size of grid reference to be generated
	 * @return {String} Grid Reference generated form coordinate pair
	 */
	CoordinatesModel.prototype.getGridRef = function(easting, northing, size) {
		var res = this.osng.gridrefNumToLet(easting, northing, size);
		return res;
	};

	/**
	 * Convert WGS84 lat/lon pair to OSGB36 easting/northing pair
	 * 
	 * @method getEastNorth
	 * @param {Float} x - X-Axis of coordinate pair to be converted
	 * @param {Float} y - Y-Axis of coordinate pair to be converted
	 * @param {Float} z - Z-Axis of coordinate pair to be converted
	 * @return {Array} Easting/Northing pair 
	 */
	CoordinatesModel.prototype.getEastNorth = function(x, y, z) {
		// Generate valid lon/lat object
		var coordinates = new lonLatValues(y, x, z);

		// Convert from WGS84 datum to OSGB36
		var datumConverter = new jsCoordinateConverter.DatumConversion("WGS84");
		var pt = datumConverter.convert(coordinates, "OSGB36");

		// Transverse Mercator convertion to AIRY_1830 geoid
		var convertedCoordinates = this.TranMerConversion.latLonToEN(pt, "OSNG", "AIRY_1830");

		// Generate valid Easting/Nothing object
		var point = new ENPoint(convertedCoordinates);
		var easting = Math.round(point.east);
		var northing = Math.round(point.north);
		return [easting, northing];
	};

	/**
	 * Convert OSGB36 easting/northing pair to WGS84 lat/lon pair
	 * 
	 * @method getLonLat
	 * @param {Integer} easting - X-Axis of coordinate pair to be converted
	 * @param {Integer} northing - Y-Axis of coordinate pair to be converted
	 * @param {Integer} height  - Z-Axis of coordinate pair to be converted
	 * @return {Array} 
	 */
	CoordinatesModel.prototype.getLonLat = function(easting, northing, height) {

		// Generate valid Easting/Nothing object
		var point = new eastNorthValues(easting, northing, height);

		// Transverse Mercator conversion from AIRY_1830 geoid
		var convertedPoint = this.TranMerConversion.enToLonLat(point, "OSNG", "AIRY_1830");

		// Convert form OSGB36 datum to WGS84 
		var datumConverter = new jsCoordinateConverter.DatumConversion("OSGB36");
		var converted = datumConverter.convert(convertedPoint, "WGS84");
		var latitude = Math.round(converted.getYAxis()*Math.pow(10,6))/Math.pow(10,6);
		var longitude = Math.round(converted.getXAxis()*Math.pow(10,6))/Math.pow(10,6);
		return [longitude, latitude];
	};

	/**
	 * CoordinatesController - Constructor function to instantiate a controller
	 * 
	 * @class CoordinatesController
	 * @constructor
	 * @param {Object} model - The model of the module to be controlled
	 * @param {Object} view - The View of the module to be controlled 
	 */
	var CoordinatesController = function(model, view) {

		this._model = model;
		this._view = view;

		var _this = this;

		// Attach convert method to button click event
		this._view.convertButtonClicked.attach(function() {
			// Convert the values in the form
			var res = _this.convert();
			if (res) {

				// Fill in empty form fields
				_this._view.displayResults(res);
				
				// Add location to map 
				var mapModel = new MapModule.model('map'),
				mapView = new MapModule.view(mapModel),
				mapCcontroller = new MapModule.controller(mapModel,  mapView);
				mapCcontroller._view.addMapIcon(res);
				map.getView().setCenter([res.finalEasting,res.finalNorthing]);
			}
		});

		// Attach resetForm method to button click event
		this._view.resetButtonClicked.attach(function() {
			_this._view.resetForm();
		});

		// Attach generateCoordinates method to map viewport click event
		this._view.mapViewportClicked.attach(function(sender, args) {

			// Convert map click location to values for coordinates form
			var res = _this.generateCoordinates(args);
			_this._view.displayResults(res);

			// Add map icon at click event location			
			var mapModel = new MapModule.model('map'),
				mapView = new MapModule.view(mapModel),
				mapCcontroller = new MapModule.controller(mapModel,  mapView);
				mapCcontroller._view.addMapIcon(res);
		});

	};

	/**
	 * Generate coordiantes from map click event
	 * 
	 * @method generateCoordinates
	 * @param {Array} args - Coordinate pair of map click event
	 * @return {Object} - Coordinate values for adding to the form
	 */
	CoordinatesController.prototype.generateCoordinates = function(args){
		
		var results = {};
				
		var easting = Math.round(args[0]);
		var northing = Math.round(args[1]);

		var eastingReg = /^0*([0-9]{1,5}|[1-6][0-9]{5}|700000)$/;
		var northingReg = /^0*([0-9]{1,6}|1[0-2][0-9]{5}|1300000)$/;

		if (eastingReg.exec(easting) && northingReg.exec(northing)) {

			results.finalEasting = easting;
			results.finalNorthing = northing;

			//GridRef
			results.finalGridRef = this._model.getGridRef(easting, northing, 10);

			//LatLon
			var coordinates = this._model.getLonLat(easting, northing, 0);
			results.finalLatitude = coordinates[1];
			results.finalLongitude = coordinates[0];
		}
		return results;

	};

	/**
	 * Convert from values to other coordinate formats
	 * 
	 * @method convert
	 * @return {Object} Values for injecting into the coordinates form
	 */
	CoordinatesController.prototype.convert = function() {
		
		var results = {};
		var point, // Easting, Northing location
			coordinates; // LatLon location

		// Gather any values from the form 	
		var startGridRef = document.getElementById("gridRef").value;
			startGridRef = this.cleanCoordinate(startGridRef);
		var startEasting = document.getElementById("easting").value;
			startEasting = this.cleanCoordinate(startEasting);
		var startNorthing = document.getElementById("northing").value;
			startNorthing = this.cleanCoordinate(startNorthing);
		var startLatitude = document.getElementById("latWGS84").value;
			startLatitude = this.cleanCoordinate(startLatitude);
		var startLongitude = document.getElementById('lonWGS84').value;
			startLongitude = this.cleanCoordinate(startLongitude);

		// If grid reference is filled in
		if(startGridRef) {
			
			var cleanGridRef = startGridRef.replace(/\s+/g, '');

			var reg = /^((([sS]|[nN])[a-hA-Hj-zJ-Z])|(([tT]|[oO])[abfglmqrvwABFGLMQRVW])|([hH][l-zL-Z])|([jJ][lmqrvwLMQRVW]))(?:(?:[0-9]){2}){1,5}$/;
			
			// Validate and convert
			if (reg.exec(cleanGridRef)) {
				results.finalGridRef = startGridRef;
				point = this._model.readGridRef(cleanGridRef);

				//EastingNorthing
				results.finalEasting = point[0];
				results.finalNorthing = point[1];

				// LatLon
				coordinates = this._model.getLonLat(point[0], point[1], 0);
				results.finalLatitude = coordinates[1];
				results.finalLongitude = coordinates[0];
			
			} else {
				alert(document.getElementById("gridRef").value+ " is not a valid OS grid reference");
			}
			// If easting/northing values are filled in
		} else if (startEasting && startNorthing) {
			
			var easting = Math.round(startEasting);
			var northing = Math.round(startNorthing);

			var eastingReg = /^0*([0-9]{1,5}|[1-6][0-9]{5}|700000)$/;
			var northingReg = /^0*([0-9]{1,6}|1[0-2][0-9]{5}|1300000)$/;

			// Validate and convert
			if (eastingReg.exec(easting) && northingReg.exec(northing)) {

				results.finalEasting = easting;
				results.finalNorthing = northing;

				//GridRef
				results.finalGridRef = this._model.getGridRef(easting, northing, 10);

				//LatLon
				coordinates = this._model.getLonLat(easting, northing, 0);
				results.finalLatitude = coordinates[1];
				results.finalLongitude = coordinates[0];
			} else {
				alert ("Not valid coordiantes");
			}

			// If latitude/longitude values are filled in
		} else if (startLatitude && startLongitude) {
			
			var latitude = Math.round(startLatitude*Math.pow(10,6))/Math.pow(10,6);
			var longitude = Math.round(startLongitude*Math.pow(10,6))/Math.pow(10,6);

			var latitudeReg = /^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$/;
			var longitudeReg = /^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$/;

			// Validate and convert	
			if (latitudeReg.exec(latitude) && longitudeReg.exec(longitude)) {

				results.finalLatitude = latitude;
				results.finalLongitude = longitude;

				//EastingNorthing
				point = this._model.getEastNorth(latitude, longitude, 0);
				results.finalEasting = point[0];
				results.finalNorthing = point[1];

				//GridRef
				results.finalGridRef = this._model.getGridRef(point[0], point[1], 10);

			}  else {
				alert ("Not valid coordiantes");
			}
		} else {
			return;
		}

		return results;
	};

	/**
	 * Remove any presentation elements to the form field contents
	 * 
	 * @method cleanCoordinate
	 * @param {String} coordinate - form field value to be stripped back to just the coordinate
	 */
	CoordinatesController.prototype.cleanCoordinate = function(coordinate) {

		var splitString = coordinate.split(":");
		if (splitString.length > 1 ){
			var trimmedString = splitString[1].trim();
		} else {
			var trimmedString = coordinate; 
		}
		return trimmedString;
	};

	/**
	 * CoordinateView - Constructor function in instantiate a view
	 * 
	 * @class CoordinatesView
	 * @constructor
	 * @param {Object} model - The model of the module to be viewed 
	 */
	var CoordinatesView = function(model) {

		this._model = model;

		// Fetch pointers to required DOM elements
		this._elements = {
			'convertButton': document.getElementById("convert"),
			'resetButton' : document.getElementById("reset_btn"),
			'coordinateFieldsets' : document.getElementById("coordinates").getElementsByTagName('fieldset')
		}

		this.convertButtonClicked = new Event(this);
		this.resetButtonClicked = new Event(this);
		this.mapViewportClicked = new Event(this);

		var _this = this;

		/** Attach listeners to HTML controls **/
		// Add event listener to convert button
		this._elements.convertButton.addEventListener('click', function(e) {
			e.preventDefault();
			_this.convertButtonClicked.notify();
		}, false);

		// Add event listener to reset button 
		this._elements.resetButton.addEventListener('click', function(e) {
			e.preventDefault();
			_this.resetButtonClicked.notify();
		}, false);

		// Add event listener to map viewport via OL3
		map.on('click', function(evt) {
			var coords = evt.coordinate;
			_this.mapViewportClicked.notify(coords);
		});

		
		// Add event listener to automatically reset parts of coordinates form
		// when manual edits are made to values
		[].forEach.call(this._elements.coordinateFieldsets, function(e){
			e.addEventListener('input', function(e) {
				var siblings = getSiblings(this, elementFilter);
				_this.clearSiblings(this, siblings);
			});
		});
		
	};
	

	/**
	 * Add converted values to the coordinates form
	 * 
	 * @method displayResults
	 * @param {Object} coordinateResults - converted values for adding to form
	 */
	CoordinatesView.prototype.displayResults = function(coordinateResults) {

		// Add back to page
		document.getElementById("gridRef").value = "OS Grid Reference: "+coordinateResults.finalGridRef;
		document.getElementById("easting").value = "Easting: "+coordinateResults.finalEasting;
		document.getElementById("northing").value = "Northing: "+coordinateResults.finalNorthing;
		document.getElementById("latWGS84").value = "Latitude: "+coordinateResults.finalLatitude;
		document.getElementById("lonWGS84").value = "Longitude: "+coordinateResults.finalLongitude;

	};

	/**
	 * Reset the coordinates form to allow for further conversion
	 * 
	 * @method resetForm
	 */
	CoordinatesView.prototype.resetForm = function() {
		document.getElementById("coordinates").reset();
	};

	/**
	 * Clear the content of all sibling 'input' elements while leaving the selected untouched
	 * 
	 * @method clearSiblings
	 */
	CoordinatesView.prototype.clearSiblings = function(selectedElement, elements) {
		var elementCount = elements.length,
			node;
		for (var i = 0; i < elementCount; i++) {
			node = elements[i];
			if (node != selectedElement) {
				var inputs = node.getElementsByTagName("input");
				for (var i = 0; i < inputs.length; i++) {
					inputs[i].value = '';
				}
			}
		}
	}


	// Return Module to wider app
	return {
		model: CoordinatesModel,
		view: CoordinatesView,
		controller: CoordinatesController
	}

})();

/**
 * Provides the gazetteer searching for the application via the 
 * OS Names API
 * 
 * @module SearchModule
 */
var SearchModule = (function(){
	'use strict'

	/**
	 * SearchModel - Constructor function to manage data realating to 
	 * searches of the OS Names API, including handeling search and 
	 * processing response data
	 * 
	 * @class SearchModel
	 * @constructor
	 */
	var SearchModel = function() {

		this.results = [];
		
		this.searchResponse = new Event(this);
		this.searchError = new Event(this);

		var _this = this;
	};

	/**
	 * Query the OS Names API
	 * 
	 * @method nameSearch
	 * @param {String} searchString - String to be searched for
	 */
	SearchModel.prototype.nameSearch = function(searchString) {

		var _this = this;
		var xmlhttp = new XMLHttpRequest();
		var query = "query="+ encodeURI(searchString);
		
		// Set up API query parameters
		var types = this.setTypeFlags(searchString);

		var namesAPIKey = "&key="+NAMES_API_KEY;
		var namesURL = "https://api.ordnancesurvey.co.uk/opennames/v1/find?";
		
		xmlhttp.onreadystatechange = function() {
			if (xmlhttp.readyState != 4) {
				return;
			}
			if (xmlhttp.status != 200 && xmlhttp.status != 304) {
				_this.searchError.notify(xmlhttp.status);
			}
			_this.results = JSON.parse(xmlhttp.responseText);
			_this.searchResponse.notify(searchString);
		};
		xmlhttp.open("GET", namesURL+query+namesAPIKey+types, true);
		xmlhttp.setRequestHeader("Accept", "application/json");
		xmlhttp.send(null);
		
		
	};

	/**
	 * Set LOCAL_TYPE flags for API request
	 * 
	 * @method setTypeFlags
	 * @param {String} searchString - String to be searched for
	 * @return {String} The LOCAL_TYPE flags to be appended to the query of the OS Names API
	 */
	SearchModel.prototype.setTypeFlags = function(searchString) {

		var typeFlags = '&fq=';
		var cleanString = searchString.replace(/\s+/g, '');
		var postCodeRegex = /^([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([AZa-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9]?[A-Za-z]))))[0-9][A-Za-z]{2})$/;

		// Test for a postcode
		if (postCodeRegex.exec(cleanString)) {
			typeFlags += 'LOCAL_TYPE:Postcode';
			return typeFlags;
		} else {
			var flags = [
				// Populated Places
				'LOCAL_TYPE:City',
				'LOCAL_TYPE:Town',
				'LOCAL_TYPE:Village',
				'LOCAL_TYPE:Hamlet',
				'LOCAL_TYPE:Other_Settlement',
				'LOCAL_TYPE:Suburban_Area',
				// // Transport Network
				'LOCAL_TYPE:Airfield',
				'LOCAL_TYPE:Airport',
				'LOCAL_TYPE:Bus_Station',
				'LOCAL_TYPE:Coach_Station',
				'LOCAL_TYPE:Named_Road',
				'LOCAL_TYPE:Numbered_Road',
				'LOCAL_TYPE:Passenger_Ferry_Terminal',
				'LOCAL_TYPE:Railway_Station',
				'LOCAL_TYPE:Road_User_Services',
				'LOCAL_TYPE:Vehicular_Ferry_Terminal',
				'LOCAL_TYPE:Vehicular_Rail_Terminal',
				// // Landform
				'LOCAL_TYPE:Island',
				// // Landcover
				'LOCAL_TYPE:Urban_Greenspace',
				// // Other
				'LOCAL_TYPE:Further_Education',
				'LOCAL_TYPE:Hospital',
				'LOCAL_TYPE:Primary_Education',
				'LOCAL_TYPE:Secondary_Education',
				'LOCAL_TYPE:Special_Needs_Education'
			];
			var joinedFlags = flags.join(" ");
			typeFlags += encodeURI(joinedFlags);
			return typeFlags;
		}
	};

	/**
	 * Make the raw API response a little more user friendly
	 * 
	 * @method getSearchResults
	 * @return {Array} An array of results from the OS Names API
	 */
	SearchModel.prototype.getSearchResults = function() {

		var rawResults = this.results;
		var count = rawResults.results.length;
		var tempArray = {} ;

		// Remove GAZETTEER_ENTRY level
		for (var i = 0; i < count; i++) {
			rawResults.results[i] = rawResults.results[i].GAZETTEER_ENTRY;
		}
		
		// Remove duplicates (Places with names is other languages appear twice in the results)
		for (var i = 0; i < rawResults.results.length; i++) {
			tempArray[rawResults.results[i]['ID']] = rawResults.results[i];
		}

		// Set English as primary language
		count = tempArray.length;
		for (var key in tempArray) {
			if (tempArray[key].NAME2_LANG === 'eng') {
				var tempName = tempArray[key].NAME2;
				var tempLang = tempArray[key].NAME2_LANG;
				tempArray[key].NAME2 = tempArray[key].NAME1;
				tempArray[key].NAME2_LANG = tempArray[key].NAME1_LANG;
				tempArray[key].NAME1 = tempName;
				tempArray[key].NAME1_LANG = tempLang;
			}
		}

		var cleanArray = {};
		cleanArray.header = rawResults.header;
		cleanArray.results = [];
		for (var key in tempArray) {
			cleanArray.results.push(tempArray[key]);
		}
		cleanArray.results = this.sortPopulatedPlaces(cleanArray.results);
		return cleanArray;
	};

	/**
	 * Rank the results by settlement category then by county
	 * 
	 * @method sortPopulatedPlaces
	 * @param {Array} searchResults - Array of results from OS Names API to be sorted
	 * @return {Array} Sorted array of results for OS Names API
	 */
	SearchModel.prototype.sortPopulatedPlaces = function(searchResults) {

		var city = [],
			town = [],
			village = [],
			hamlet = [],
			suburbanArea = [],
			otherSettlement = [],
			other = [];
		var count = searchResults.length;

		// Split the results by LOCAL_TYPE, focusing on populated places 
		for (var i = 0; i < count; i++) {
			var searchResult = searchResults[i];
			switch(searchResult.LOCAL_TYPE) {
				case 'City':
					city.push(searchResult);
					break;
				case 'Town':
					town.push(searchResult);
					break;
				case 'Village':
					village.push(searchResult);
					break;
				case 'Suburban_Area':
					suburbanArea.push(searchResult);
					break;
				case 'Other_Settlement':
					otherSettlement.push(searchResult);
					break;
				default:
					other.push(searchResult);
			}
		}

		// Sort each array by county
		if (city.length >=1 ) city = this.sortByCounty(city);
		if (town.length >=1 ) town = this.sortByCounty(town);
		if (village.length >=1 ) village = this.sortByCounty(village);
		if (hamlet.length >=1 ) hamlet = this.sortByCounty(hamlet);
		if (suburbanArea.length >=1 ) suburbanArea = this.sortByCounty(suburbanArea);
		if (otherSettlement.length >=1 ) otherSettlement = this.sortByCounty(otherSettlement);

		// Combine into a single results array
		var combined = city.concat(town,village,hamlet,suburbanArea,otherSettlement,other);
		return combined;
	};

	/**
	 * Arrange the supplied array by LOCAL_TYPE:COUNTY_UNITARY property
	 * 
	 * @method sortByCounty
	 * @param {Array} populatedPlaces - Populated placed to be sorted
	 * @return {Array} Sorted Populated placed 
	 */
	SearchModel.prototype.sortByCounty = function(populatedPlaces) {
			
		var  count = populatedPlaces.length;
		for (var i = 0; i < count; i++) {
			// Double check object is a populated place
			if (populatedPlaces[i].TYPE !== 'populatedPlace') {
				return;
			}
		}
		
		if (populatedPlaces.length >= 2){
			populatedPlaces.sort(function(a,b) {
				var nameA = a.COUNTY_UNITARY.toLowerCase(), nameB=b.COUNTY_UNITARY.toLowerCase();
				if (nameA < nameB) //sort string ascending
					return -1;
				if (nameA > nameB)
					return 1;
				return 0; //default return value (no sorting)
			});
		}

		return populatedPlaces;
	};

	/**
	 * SearchController - Constructor function to instantiate a controller
	 * 
	 * @class SearchController
	 * @constructor
	 * @param {Object} model - The Model of the Module to be controlled
	 * @param {Object} view - The View of the Module to be controlled
	 */
	var SearchController = function(model, view) {
		
		this._model = model;
		this._view = view;

		var _this = this;

		// Attach search method to button click event
		this._view.searchButtonClicked.attach(function(sender, args){
			_this.search(args);
		});
	};

	/**
	 * Submit the users input to the model to query the OS Names API
	 * 
	 * @method search
	 * @param {Object} searchString - The input value the user is searching for
	 */
	SearchController.prototype.search = function(searchString){

		if (searchString) {
			this._model.nameSearch(searchString);
		}
	};

	/**
	 * SearchView - Constructor function to instantiate a view
	 * 
	 * @class SearchView
	 * @constructor
	 * @param {Object} model - The Model of the module to be viewed
	 */
	var SearchView = function(model) {

		this._model = model;

		// Fetch pointers to required DOM elements
		this._elements = {
			'searchButton': document.getElementById("searchButton"),
			'searchResults': document.getElementById("searchResults")
		};

		this.searchButtonClicked = new Event(this);
		this.locationSelectionClicked = new Event(this);

		var _this = this;

		/** Attach listeners to HTML controls */
		// Add event listener to gazetteer search
		this._elements.searchButton.addEventListener('click', function(e) {
			e.preventDefault();
			var searchString = document.getElementById("search-query").value;
			_this.searchButtonClicked.notify(searchString);
		});

		this._elements.searchResults.addEventListener('click', function(e){
			if (e.target.classList[0] === 'result') {
				var result = e.target;
				location.GEOMETRY_X = result.dataset.x;
				location.GEOMETRY_Y = result.dataset.y; 
				_this.displaySingleResult(location);
			}
		});

		/** Attach listeners to model */
		// Attach displayResults to a model response
		this._model.searchResponse.attach(function(sender, args) {
			var apiResponse = _this._model.getSearchResults();
			var apiFilter = apiResponse.header.filter;
			var lastFilter = apiFilter.substring(apiFilter.lastIndexOf(":") + 1);
			if (lastFilter === 'Postcode') {
				var cleanArgs = args.replace(/ /g,'');
				if (apiResponse.results[0].ID === cleanArgs.toUpperCase()){
					_this.displaySingleResult(apiResponse.results[0]);
				} else {
					var missingPostcode = apiResponse.header.query.toUpperCase();
					var postcodeLength = missingPostcode.length;
					var endSection = missingPostcode.slice(-3);
					var trimLength = postcodeLength-3;
					var startSection = missingPostcode.substring(0,trimLength);
					var dialog = {
						dialogID: "noResult",
						dialogClass: "noResult",
						dialogClose: false,
						dialogHeader: "<span class=\"glyphicon glyphicon-exclamation-sign\"></span> NOTICE",
						dialogContent: "<p class='text-center' style='height: 50px'>The postcode <strong>" +startSection+" "+endSection+ "</strong> is not presently in the OS Open Names database.</p>"		
					};
					View.renderDialog(dialog);
					View.modal();
				}
			} else {
				_this.displayResults(apiResponse.results);
			}
			
		});

		// Attach displayError to  model response
		this._model.searchError.attach(function(){
			_this.displayError();
		});
	};

	/**
	 * display a single result by panning to location and ading marker to map
	 * 
	 * @method displaySingleResult
	 * @param {Object} result - single result to be plotted
	 */
	SearchView.prototype.displaySingleResult = function(result) {
		
		if (result) {
			var easting  = result.GEOMETRY_X;
			var northing = result.GEOMETRY_Y;
			
			// Convert location and add to coordinates panel
			var coordinatesModel = new CoordinatesModule.model(),
			coordinatesView = new CoordinatesModule.view(coordinatesModel),
			coordinatesController = new CoordinatesModule.controller(coordinatesModel, coordinatesView);
			var  res = coordinatesController.generateCoordinates([easting, northing]);
			coordinatesView.displayResults(res);

			// Plot location on map
			var mapModel = new MapModule.model('map'),
			mapView = new MapModule.view(mapModel),
			mapCcontroller = new MapModule.controller(mapModel,  mapView);

			mapCcontroller._view.addMapIcon(res);
			map.getView().setCenter([res.finalEasting,res.finalNorthing]);

		}
	};

	/**
	 * Loop through and display the results from the query of the OS Names API
	 * 
	 * @method displayResults
	 * @param {Object} results - The response object from the OS Names API for showing 
	 */
	SearchView.prototype.displayResults = function(results) {

		var list = document.getElementById("Scroller-Container");
		list.innerHTML = "";

		for( var i=0; i < results.length; i++) {

			//Check the result is of use
			var result = results[i];
			list.appendChild(this.buildResultListEntry(result));
			
		}
		// document.getElementById("Scroller-Container").innerHTML = '';
		document.getElementById("searchResults").appendChild(list);
		
	};

	/**
	 * Tidy up and present a individual entry from the OS Names response object
	 * 
	 * @method buildResultListEntry
	 * @param {Object} result - single result to be sorted
	 * @return {Object} Single HTML object for adding to the DOM 
	 */
	SearchView.prototype.buildResultListEntry = function(result) {
		
		var name,
			county,
			settlement;
		var easting = Math.round(result.GEOMETRY_X);
		var northing = Math.round(result.GEOMETRY_Y);

		// Set out bilingual names
		if (result.NAME2) {
			name = result.NAME1+'/'+result.NAME2;
		} else {
			name = result.NAME1;
		}

		// Append 'Railway Station' where applicable
		if (result.LOCAL_TYPE === 'Railway Station') {
			name = name +' (Railway Station)';
		}
		// Make sure we have admin area available
		if (result.COUNTY_UNITARY) {
			county = result.COUNTY_UNITARY;
		} else {
			county = result.DISTRICT_BOROUGH;
		}
		
		// Make sure we have a settlement available
		if (result.POPULATED_PLACE){
			settlement = result.POPULATED_PLACE;
		} else if (result.DISTRICT_BOROUGH) {
			settlement = result.DISTRICT_BOROUGH;
		} else {
			settlement = '';
		}

		// Remove multilingual admin names
		if (county) {
			var countyRegex = /[^-]+$/;
			county = countyRegex.exec(county);
			county = county[0].replace(/^\s+|\s+$|\s+(?=\s)/g, "");
		} else {
			county = '';
		}

		// Build the DOM element and insert result
		var entry = document.createElement("li");
		entry.className = 'result';
		entry.dataset.placeid = result.ID;
		entry.dataset.x = easting;
		entry.dataset.y = northing;

		var entryHtml = name+"<br>";
		if (result.TYPE === 'transportNetwork' || result.LOCAL_TYPE === 'Postcode') {
				if (settlement) {
					entryHtml += settlement+", ";
				}
			}
		entryHtml += county+", "+result.POSTCODE_DISTRICT;+"</li>";
		entry.innerHTML = entryHtml;
		return entry;
	};



	SearchView.prototype.displayError = function() {

	};

	// Return Module to wider app
	return {
		model: SearchModel,
		view: SearchView,
		controller: SearchController
	}

})();

/**
 * Provides the file upload functionality for the application
 * NB: Error handling in the module is very limited
 * 
 * @module UploadModule
 */
/*var UploadModule = (function(){
	'use strict'

	/!**
	 * UploadModel - Constructor function to manage data relating to
	 * uploaded files
	 * 
	 * @class UploadModel
	 * @constructor
	 *!/
	var UploadModel = function(){

		var results = [];
		var _this = this;
	};

	/!**
	 * Using FileReader API consume loaded file
	 * 
	 * @method readFile
	 * @param {Object} file - single file to be read
	 * @param {object} onLoadCallback - callback method used to manage asynchronous file reading
	 *!/
	UploadModel.prototype.readFile = function(file, onLoadCallback) {
		
		var reader = new FileReader();
		reader.onload = onLoadCallback;
		reader.readAsText(file, "UTF-8");

	};

	/!**
	 * UploadController - Constructor function to instantiate a controller
	 * 
	 * @class UploadController
	 * @constructor
	 * @param {Object} model - The Model of the Module to be controlled
	 * @param {Object} view - The View of the Module to be controlled
	 *!/
	var UploadController = function(model, view){

		this._model = model;
		this._view = view;

		var _this = this;

		// Attach search method to button click event
		this._view.filesDropped.attach(function(sender, args) {
			_this.handleUploadedFile(args);	
		});

		// Attach search method to button click event
		this._view.filesSubmitted.attach(function(sender, args){
			_this.search(args);
		});
	};

	/!**
	 * Instatiate reading of file and make use of OpenLayers library
	 * to add result to map
	 * 
	 * @method handleUploadedFile
	 * @param {Object} e - file upload event
	 *!/
	UploadController.prototype.handleUploadedFile = function(e) {

		var files = [];

		// Fetch files from upload
		if (e.dataTransfer) {
			files = e.dataTransfer.files; // drag and drop
		} else {
			files = e.target.files; // standard upload form 
		}

		var filename = files[0].name.toLowerCase(),
			filesize = files[0].size,
			maxsize = 1024 * 1024; // 1mb

		// Crude check on file type and size
		if (filename.length < 5 || filename.substring(filename.length - 4 ) != '.gpx') {
			alert ('Not a GPX file');
			return;
		} else {
			var fileFormat = new ol.format.GPX();
		}

		if (filesize > maxsize) {
			alert('File is too big!');
			return;
		}

		this._model.readFile(files[0], function(e){
			var loadedFeatures = fileFormat.readFeature(e.target.result, {
                dataProjection:'EPSG:4326',
                featureProjection:'EPSG:27700'
            });

			// Add loaded features to the map (uses OpenLayers)			
			var mapModel = new MapModule.model('map'),
				mapView = new MapModule.view(mapModel),
				mapCcontroller = new MapModule.controller(mapModel,  mapView);
				
				mapCcontroller._view.addRouteLine(loadedFeatures);

			// Adjust view to take sidebar into account when centering on feature
            var sidebar = document.getElementById('sidebar-wrapper');
            var paddingValues = [];
            if (sidebar.classList.contains("toggled")) {
                paddingValues = [0,0,0,0];
            } else {
                paddingValues = [0,0,0, 425]
            }

            // Pan and scale to loaded feature
            map.getView().fit(loadedFeatures.getGeometry(), {padding: paddingValues});
		});
	};

	/!**
	 * UploadView - Constructor function to instantiate a view
	 * 
	 * @class UploadView
	 * @constructor
	 * @param {Object} model - The Model of the module to be viewed
	 *!/
	var UploadView = function(model){

		this._model = model;

		// Fetch pointers to required DOM elements
		this._elements = {
			'uploadForm': document.getElementById("uploadForm")
		};

		this.filesDropped = new Event(this);
		this.filesSubmitted = new Event(this);


		var _this = this;

		// Add event listener to page load to detect required APIs
		window.addEventListener('load', function(e) {
			if (_this.detectAPISupport()) {
				_this._elements.uploadForm.classList.add("has-advanced-upload");
				/!** Attach listeners to HTML controls *!/
				("drag dragstart dragend dragover dragenter dragleave drop".split(" ")).forEach(function(e){
					_this._elements.uploadForm.addEventListener(e, function(e){
						e.preventDefault();
						e.stopPropagation();
					})
				});

				// Adjust styling based upon drag and drop events
				("dragover dragenter".split(" ")).forEach(function(e){
					_this._elements.uploadForm.addEventListener(e, function(e){
						_this._elements.uploadForm.classList.add('is-dragover');
					}, false);
				});

				("dragleave dragend drop". split(" ")).forEach(function(e){
					_this._elements.uploadForm.addEventListener(e, function(){
						_this._elements.uploadForm.classList.remove('is_dragover');
					}, false)
				});

				// Add event listener to drag and drop zone
				_this._elements.uploadForm.addEventListener('drop', function(e) {
					e.preventDefault();
					_this.filesDropped.notify(e);
				}, false);

				// Add event listener to manual file upload
				_this._elements.uploadForm.addEventListener('change', function(e){
					e.preventDefault();
					_this.filesSubmitted.notify(e);
				}, false);
			} else {
				var uploadPanel = document.getElementById('uploadPanel');
				var unsupportedNotice = "<p>This browser does <strong>NOT</strong> support file uploads. Please use a more uptodate browser.</p>"
				uploadPanel.innerHTML(unsupportedNotice)
			}
		});
	};

	/!**
	 * Makesuer browser supports the required WEB APIs
	 * 
	 * @method detectAPISupport
	 * @return {Boolean} 
	 *!/
	UploadView.prototype.detectAPISupport = function() {
		
		var div = document.createElement('div');
  		return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FileReader' in window;
	};

	// Return Module to wider app
	return {
		model: UploadModel,
		view: UploadView,
		controller: UploadController
	}
})();*/

// Control of sliding side bar
var sideBarIcon = document.getElementById('sidebar-icon');
sideBarIcon.addEventListener('click', function(e) {
	var sidebar = document.getElementById("sidebar-wrapper")
	sidebar.classList.toggle("toggled");
	var sidebarMenu = document.getElementById("sidebar-menu");
	sidebarMenu.classList.toggle("toggled");
});

var actionMenu = document.getElementById("actionMenu");
actionMenu.addEventListener('click', function(e) {
	e.preventDefault();

	var tabContent = document.getElementsByClassName('tabContent');
	var tabContentCount = tabContent.length;
	for (var i = 0; i < tabContentCount; i++){
		tabContent[i].style.display = "none";
	}
	var tabLink = document.getElementsByClassName('tabLink');
	var tabLinkCount = tabLink.length;
	for (var i = 0; i < tabLinkCount; i++) {
		tabLink[i].className = tabLink[i].className.replace("activeTabLink", "");
	}
	if(e.target && e.target.nodeName == "LI") {
		var content = e.target.dataset.content;
	}

	document.getElementById(content+"Panel").style.display = "block";	
	e.target.classList.add("activeTabLink");

});

(function(){

   	var mapModel = new MapModule.model('map'),
       	mapView = new MapModule.view(mapModel),
        mapCcontroller = new MapModule.controller(mapModel,  mapView);
        mapCcontroller.loadMap();

	var coordinatesModel = new CoordinatesModule.model(),
		coordinatesView = new CoordinatesModule.view(coordinatesModel),
		coordinatesController = new CoordinatesModule.controller(coordinatesModel, coordinatesView);	
	
	var searchModel = new SearchModule.model(),
		searchView = new SearchModule.view(searchModel),
		searchController = new SearchModule.controller(searchModel, searchView);

	// var uploadModel = new UploadModule.model(),
	//	uploadView = new UploadModule.view(uploadModel),
	//	uploadController = new UploadModule.controller(uploadModel, uploadView);

	// var layerModel = new LayerModel(),
	// 	layerView = new LayerView(layerModel, {
	// 		'layerSwitcher': document.getElementById('layerSwitcher')
	// 	}),
	// 	layerController = new LayerController(layerModel, layerView);
	// 	layerView.loadLayers();
})();
